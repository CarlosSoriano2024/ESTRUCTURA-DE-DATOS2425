using System;

class Nodo
{
    public int Valor;
    public Nodo Izquierdo, Derecho;

    public Nodo(int valor)
    {
        Valor = valor;
        Izquierdo = Derecho = null;
    }
}

class ArbolBinario
{
    private Nodo Raiz;

    public void Insertar(int valor)
    {
        Raiz = InsertarRecursivo(Raiz, valor);
    }

    private Nodo InsertarRecursivo(Nodo nodo, int valor)
    {
        if (nodo == null)
            return new Nodo(valor);

        if (valor < nodo.Valor)
            nodo.Izquierdo = InsertarRecursivo(nodo.Izquierdo, valor);
        else if (valor > nodo.Valor)
            nodo.Derecho = InsertarRecursivo(nodo.Derecho, valor);

        return nodo;
    }

    public bool Buscar(int valor)
    {
        return BuscarRecursivo(Raiz, valor);
    }

    private bool BuscarRecursivo(Nodo nodo, int valor)
    {
        if (nodo == null)
            return false;

        if (valor == nodo.Valor)
            return true;

        if (valor < nodo.Valor)
            return BuscarRecursivo(nodo.Izquierdo, valor);

        return BuscarRecursivo(nodo.Derecho, valor);
    }

    public void Borrar(int valor)
    {
        Raiz = BorrarRecursivo(Raiz, valor);
    }

    private Nodo BorrarRecursivo(Nodo nodo, int valor)
    {
        if (nodo == null)
            return nodo;

        if (valor < nodo.Valor)
            nodo.Izquierdo = BorrarRecursivo(nodo.Izquierdo, valor);
        else if (valor > nodo.Valor)
            nodo.Derecho = BorrarRecursivo(nodo.Derecho, valor);
        else
        {
            if (nodo.Izquierdo == null)
                return nodo.Derecho;
            else if (nodo.Derecho == null)
                return nodo.Izquierdo;

            nodo.Valor = MinValor(nodo.Derecho);
            nodo.Derecho = BorrarRecursivo(nodo.Derecho, nodo.Valor);
        }

        return nodo;
    }

    private int MinValor(Nodo nodo)
    {
        int minValor = nodo.Valor;
        while (nodo.Izquierdo != null)
        {
            minValor = nodo.Izquierdo.Valor;
            nodo = nodo.Izquierdo;
        }
        return minValor;
    }

    public void RecorrerInOrden()
    {
        RecorrerInOrdenRecursivo(Raiz);
        Console.WriteLine();
    }

    private void RecorrerInOrdenRecursivo(Nodo nodo)
    {
        if (nodo != null)
        {
            RecorrerInOrdenRecursivo(nodo.Izquierdo);
            Console.Write(nodo.Valor + " ");
            RecorrerInOrdenRecursivo(nodo.Derecho);
        }
    }
}

class Program
{
    static void Main()
    {
        ArbolBinario arbol = new ArbolBinario();
        int opcion;

        do
        {
            Console.WriteLine("\n--- Menú de Operaciones en Árbol Binario ---");
            Console.WriteLine("1. Insertar un nodo");
            Console.WriteLine("2. Buscar un nodo");
            Console.WriteLine("3. Borrar un nodo");
            Console.WriteLine("4. Mostrar recorrido InOrden");
            Console.WriteLine("5. Salir");
            Console.Write("Seleccione una opción: ");
            opcion = int.Parse(Console.ReadLine());

            switch (opcion)
            {
                case 1:
                    Console.Write("Ingrese un valor para insertar: ");
                    int valorInsertar = int.Parse(Console.ReadLine());
                    arbol.Insertar(valorInsertar);
                    break;
                case 2:
                    Console.Write("Ingrese un valor para buscar: ");
                    int valorBuscar = int.Parse(Console.ReadLine());
                    Console.WriteLine(arbol.Buscar(valorBuscar)
                        ? "Nodo encontrado."
                        : "Nodo no encontrado.");
                    break;
                case 3:
                    Console.Write("Ingrese un valor para borrar: ");
                    int valorBorrar = int.Parse(Console.ReadLine());
                    arbol.Borrar(valorBorrar);
                    break;
                case 4:
                    Console.WriteLine("Recorrido InOrden del árbol:");
                    arbol.RecorrerInOrden();
                    break;
                case 5:
                    Console.WriteLine("Saliendo...");
                    break;
                default:
                    Console.WriteLine("Opción inválida.");
                    break;
            }
        } while (opcion != 5);
    }
}
