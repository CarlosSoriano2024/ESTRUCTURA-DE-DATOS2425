PROGRAM 1 BUSQUEDA ITERATIVA

using System;
using System.Collections.Generic;

class CatalogoRevistas
{
    static void Main()
    {
        // Crear catálogo de revistas
        List<string> catalogo = new List<string>
        {
            "Revista A",
            "Revista B",
            "Revista C",
            "Revista D",
            "Revista E",
            "Revista F",
            "Revista G",
            "Revista H",
            "Revista I",
            "Revista J"
        };

        // Mostrar menú
        bool continuar = true;
        while (continuar)
        {
            Console.WriteLine("\nMenú:");
            Console.WriteLine("1. Buscar un título");
            Console.WriteLine("2. Salir");
            Console.Write("Seleccione una opción: ");
            string opcion = Console.ReadLine();

            switch (opcion)
            {
                case "1":
                    // Buscar un título
                    Console.Write("Ingrese el título a buscar: ");
                    string titulo = Console.ReadLine();
                    bool encontrado = BuscarTitulo(catalogo, titulo);
                    Console.WriteLine(encontrado ? "Encontrado" : "No encontrado");
                    break;

                case "2":
                    // Salir
                    continuar = false;
                    Console.WriteLine("Saliendo del programa...");
                    break;

                default:
                    Console.WriteLine("Opción inválida. Intente nuevamente.");
                    break;
            }
        }
    }

    // Método de búsqueda iterativa
    static bool BuscarTitulo(List<string> catalogo, string titulo)
    {
        foreach (string item in catalogo)
        {
            if (item.Equals(titulo, StringComparison.OrdinalIgnoreCase))
            {
                return true;
            }
        }
        return false;
    }
}


PROGRAM 2 BUSQUEDA RECURSIVA

using System;
using System.Collections.Generic;

class CatalogoRevistas
{
    static void Main()
    {
        // Crear catálogo de revistas
        List<string> catalogo = new List<string>
        {
            "Revista A",
            "Revista B",
            "Revista C",
            "Revista D",
            "Revista E",
            "Revista F",
            "Revista G",
            "Revista H",
            "Revista I",
            "Revista J"
        };

        // Mostrar menú
        bool continuar = true;
        while (continuar)
        {
            Console.WriteLine("\nMenú:");
            Console.WriteLine("1. Buscar un título");
            Console.WriteLine("2. Salir");
            Console.Write("Seleccione una opción: ");
            string opcion = Console.ReadLine();

            switch (opcion)
            {
                case "1":
                    // Buscar un título
                    Console.Write("Ingrese el título a buscar: ");
                    string titulo = Console.ReadLine();
                    bool encontrado = BuscarTituloRecursivo(catalogo, titulo, 0);
                    Console.WriteLine(encontrado ? "Encontrado" : "No encontrado");
                    break;

                case "2":
                    // Salir
                    continuar = false;
                    Console.WriteLine("Saliendo del programa...");
                    break;

                default:
                    Console.WriteLine("Opción inválida. Intente nuevamente.");
                    break;
            }
        }
    }

    // Método de búsqueda recursiva
    static bool BuscarTituloRecursivo(List<string> catalogo, string titulo, int indice)
    {
        // Caso base: Si se alcanza el final de la lista
        if (indice >= catalogo.Count)
        {
            return false;
        }

        // Comparar el elemento actual con el título buscado
        if (catalogo[indice].Equals(titulo, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        // Llamada recursiva al siguiente índice
        return BuscarTituloRecursivo(catalogo, titulo, indice + 1);
    }
}
